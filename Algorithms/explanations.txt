QUESTION1:

S= longest string and T=shortest string.
These are the steps I am thinking of taking:
- transform each letter into ASCII format.
- calculate the length of the shortest string T
- “slide” a window with the length of T on top of S and see if the sum of the letters contained in that window is equal to the sum of T. (since an anagram of the letters contained in that window brings to the same sum value as the string T)

The number of iterations will be equal to: (length(S)-length(T) +1)
So I consider the algorithm's complexity of being approximately comparable to O(length(S))

##############

QUESTION2:

The first algorithm that comes in my mind acts as the following:
- divide in 2 cases: odd palindrome and even palindrome and for each:
- go through the whole string fixing the centre and expanding in both directions

This algorithm runs in O(n^2) and it also occupies more space as we are using a second array to store the reverse string.

###############

QUESTION3: 

A solution to this problem is given by the Dijkstra's algorithm, which is a greedy algorithm.
The steps are the following:
- from a graph I extrapolate the keys which are the "FROM" nodes
- I loop through each node and looping through each tuple I find the "TO" node that has the lowest edge value
- I construct a new graph that contains the list of "FROM" nodes pointing to a "TO" node with lowest edge value as calculated before.

The efficiency is O(|V|^2) (where V is the number of vertices or nodes).

###################

QUESTION4:

Knowing that the tree is a BST, makes it simpler as we can obey to the properties of BST (left nodes are smaller, right nodes bigger).
The solution consists of recursively traversing the tree. 
First I "get rid" of the odd cases where root, n1,n2 are null and the case where n1=n2, which are intuitive.
The node that lies in between n1 and n2 will be the value we are looking for.
If instead the node is greater than the max_val between n1 and n2, then I will look at the left hand side of the tree. 
If the node is smaller than the min_val I will, instead, search through the right hand side of the tree.

The time complexity with this solution is O(h), where h is the height of the tree. This solution does not require extra space.

##################

QUESTION5:

Since we don't know the length of the linked list we can take advantage of the "pointers".
We set the head as the "ll" (the first node) and we we iterate as the number of "m" (the nth value from the end), until we reach null as the "next" point, whcih means we reached the end of the list.

This algorithm runs in linear time O(m).

